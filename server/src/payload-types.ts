/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    billing_plan: BillingPlan;
    serpWeatherKeywords: SerpWeatherKeyword;
    serpVolatilityScores: SerpVolatilityScore;
    serpSnapshots: SerpSnapshot;
    internalPageRanks: InternalPageRank;
    'internal-url': InternalUrl;
    'page-duplicates': PageDuplicate;
    'backlink-sites': BacklinkSite;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    billing_plan: BillingPlanSelect<false> | BillingPlanSelect<true>;
    serpWeatherKeywords: SerpWeatherKeywordsSelect<false> | SerpWeatherKeywordsSelect<true>;
    serpVolatilityScores: SerpVolatilityScoresSelect<false> | SerpVolatilityScoresSelect<true>;
    serpSnapshots: SerpSnapshotsSelect<false> | SerpSnapshotsSelect<true>;
    internalPageRanks: InternalPageRanksSelect<false> | InternalPageRanksSelect<true>;
    'internal-url': InternalUrlSelect<false> | InternalUrlSelect<true>;
    'page-duplicates': PageDuplicatesSelect<false> | PageDuplicatesSelect<true>;
    'backlink-sites': BacklinkSitesSelect<false> | BacklinkSitesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    paypal_product_id: PaypalProductId;
  };
  globalsSelect: {
    paypal_product_id: PaypalProductIdSelect<false> | PaypalProductIdSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  role: 'admin' | 'user';
  username?: string | null;
  profilePicture?: (string | null) | Media;
  profileImageURL?: string | null;
  googleId?: string | null;
  subscriptionPlan?: (string | null) | BillingPlan;
  apiPlan?: (string | null) | BillingPlan;
  paypalSubscriptionExpiresAt?: string | null;
  availableFeatures?: {
    tokens?: number | null;
    ai_tokens?: number | null;
    seats?: number | null;
    guests?: number | null;
    monitoring?: number | null;
  };
  projects?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "billing_plan".
 */
export interface BillingPlan {
  id: string;
  plan_name?: string | null;
  month_plan_id?: string | null;
  year_plan_id?: string | null;
  description?: string | null;
  monthly_price?: number | null;
  yearly_price?: number | null;
  interval_unit?: ('MONTH' | 'YEAR') | null;
  category: 'subscription' | 'api';
  currency?: ('USD' | 'EUR') | null;
  features?: {
    subscription_features?: {
      tokens?: number | null;
      ai_tokens?: number | null;
      seats?: number | null;
      guests?: number | null;
      monitoring?: number | null;
    };
    api_features?: {
      parallel_generation?: number | null;
      api_rate_limit?: number | null;
    };
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "serpWeatherKeywords".
 */
export interface SerpWeatherKeyword {
  id: string;
  keyword: string;
  category:
    | 'News'
    | 'Adult'
    | 'Games'
    | 'Health'
    | 'Sports'
    | 'Finance'
    | 'Science'
    | 'Shopping'
    | 'Reference'
    | 'Real Estate'
    | 'Food & Drink'
    | 'Home & Garden'
    | 'Pets & Animals'
    | 'Autos & Vehicles'
    | 'Beauty & Fitness'
    | 'Jobs & Education'
    | 'Law & Government'
    | 'People & Society'
    | 'Hobbies & Leisure'
    | 'Books & Literature'
    | 'Internet & Telecom'
    | 'Online & Communities'
    | 'Arts & Entertainment'
    | 'Business & Industrial'
    | 'Computers & Electronics'
    | 'Travel & Transportation';
  intent: 'informational' | 'commercial' | 'navigational' | 'transactional';
  features?:
    | {
        feature?: ('People Also Ask' | 'Knowledge Graph' | 'Image Pack' | 'Related' | 'News Pack') | null;
        id?: string | null;
      }[]
    | null;
  volatilityScore?: number | null;
  source?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "serpVolatilityScores".
 */
export interface SerpVolatilityScore {
  id: string;
  category: string;
  date: string;
  score: number;
  scoreLevel?: ('low' | 'medium' | 'high' | 'extreme') | null;
  features?: {
    peopleAlsoAsk?: number | null;
    imagePack?: number | null;
    related?: number | null;
    knowledgeGraph?: number | null;
    newsPack?: number | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "serpSnapshots".
 */
export interface SerpSnapshot {
  id: string;
  keyword: string;
  category: string;
  tracking?:
    | {
        date: string;
        results?:
          | {
              rank: number;
              title: string;
              link: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "internalPageRanks".
 */
export interface InternalPageRank {
  id: string;
  baseUrl: string;
  scores?:
    | {
        url: string;
        score: number;
        id?: string | null;
      }[]
    | null;
  lastCrawledAt: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "internal-url".
 */
export interface InternalUrl {
  id: string;
  baseUrl: string;
  urls?:
    | {
        url: string;
        id?: string | null;
      }[]
    | null;
  fetchedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "page-duplicates".
 */
export interface PageDuplicate {
  id: string;
  baseUrl: string;
  duplicates: {
    urlA: string;
    urlB: string;
    score: number;
    status: 'Perfect' | 'OK' | 'Danger';
    id?: string | null;
  }[];
  analyzedAt: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "backlink-sites".
 */
export interface BacklinkSite {
  id: string;
  baseUrl: string;
  searchHistory?:
    | {
        userEmail: string;
        searchedAt: string;
        backlinks?:
          | {
              sourceUrl: string;
              targetUrl: string;
              authorityScore: string;
              linkStrength: number;
              anchorText: string;
              followType: 'dofollow' | 'nofollow';
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'billing_plan';
        value: string | BillingPlan;
      } | null)
    | ({
        relationTo: 'serpWeatherKeywords';
        value: string | SerpWeatherKeyword;
      } | null)
    | ({
        relationTo: 'serpVolatilityScores';
        value: string | SerpVolatilityScore;
      } | null)
    | ({
        relationTo: 'serpSnapshots';
        value: string | SerpSnapshot;
      } | null)
    | ({
        relationTo: 'internalPageRanks';
        value: string | InternalPageRank;
      } | null)
    | ({
        relationTo: 'internal-url';
        value: string | InternalUrl;
      } | null)
    | ({
        relationTo: 'page-duplicates';
        value: string | PageDuplicate;
      } | null)
    | ({
        relationTo: 'backlink-sites';
        value: string | BacklinkSite;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  username?: T;
  profilePicture?: T;
  profileImageURL?: T;
  googleId?: T;
  subscriptionPlan?: T;
  apiPlan?: T;
  paypalSubscriptionExpiresAt?: T;
  availableFeatures?:
    | T
    | {
        tokens?: T;
        ai_tokens?: T;
        seats?: T;
        guests?: T;
        monitoring?: T;
      };
  projects?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "billing_plan_select".
 */
export interface BillingPlanSelect<T extends boolean = true> {
  plan_name?: T;
  month_plan_id?: T;
  year_plan_id?: T;
  description?: T;
  monthly_price?: T;
  yearly_price?: T;
  interval_unit?: T;
  category?: T;
  currency?: T;
  features?:
    | T
    | {
        subscription_features?:
          | T
          | {
              tokens?: T;
              ai_tokens?: T;
              seats?: T;
              guests?: T;
              monitoring?: T;
            };
        api_features?:
          | T
          | {
              parallel_generation?: T;
              api_rate_limit?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "serpWeatherKeywords_select".
 */
export interface SerpWeatherKeywordsSelect<T extends boolean = true> {
  keyword?: T;
  category?: T;
  intent?: T;
  features?:
    | T
    | {
        feature?: T;
        id?: T;
      };
  volatilityScore?: T;
  source?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "serpVolatilityScores_select".
 */
export interface SerpVolatilityScoresSelect<T extends boolean = true> {
  category?: T;
  date?: T;
  score?: T;
  scoreLevel?: T;
  features?:
    | T
    | {
        peopleAlsoAsk?: T;
        imagePack?: T;
        related?: T;
        knowledgeGraph?: T;
        newsPack?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "serpSnapshots_select".
 */
export interface SerpSnapshotsSelect<T extends boolean = true> {
  keyword?: T;
  category?: T;
  tracking?:
    | T
    | {
        date?: T;
        results?:
          | T
          | {
              rank?: T;
              title?: T;
              link?: T;
              id?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "internalPageRanks_select".
 */
export interface InternalPageRanksSelect<T extends boolean = true> {
  baseUrl?: T;
  scores?:
    | T
    | {
        url?: T;
        score?: T;
        id?: T;
      };
  lastCrawledAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "internal-url_select".
 */
export interface InternalUrlSelect<T extends boolean = true> {
  baseUrl?: T;
  urls?:
    | T
    | {
        url?: T;
        id?: T;
      };
  fetchedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "page-duplicates_select".
 */
export interface PageDuplicatesSelect<T extends boolean = true> {
  baseUrl?: T;
  duplicates?:
    | T
    | {
        urlA?: T;
        urlB?: T;
        score?: T;
        status?: T;
        id?: T;
      };
  analyzedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "backlink-sites_select".
 */
export interface BacklinkSitesSelect<T extends boolean = true> {
  baseUrl?: T;
  searchHistory?:
    | T
    | {
        userEmail?: T;
        searchedAt?: T;
        backlinks?:
          | T
          | {
              sourceUrl?: T;
              targetUrl?: T;
              authorityScore?: T;
              linkStrength?: T;
              anchorText?: T;
              followType?: T;
              id?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "paypal_product_id".
 */
export interface PaypalProductId {
  id: string;
  product_id?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "paypal_product_id_select".
 */
export interface PaypalProductIdSelect<T extends boolean = true> {
  product_id?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}